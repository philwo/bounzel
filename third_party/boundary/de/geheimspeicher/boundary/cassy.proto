syntax = "proto3";

package de.geheimspeicher.boundary;

import "de/geheimspeicher/boundary/digest.proto";
import "de/geheimspeicher/boundary/file.proto";

option java_outer_classname = "CassyProto";
option java_package = "de.geheimspeicher.boundary";

service CassyService {
  // Do a (possibly zero-copy) upload of an existing file on an executor node
  // into the CAS.
  rpc Deed(CassyDeedRequest) returns (CassyDeedResponse);

  // Makes a blob available on the local filesystem until explicitly unlocked
  // via Unpin.
  rpc Pin(CassyPinRequest) returns (CassyPinResponse);

  // Removes all pins created by earlier calls to Pin.
  rpc Unpin(CassyUnpinRequest) returns (CassyUnpinResponse);

  // Returns part or all of a blob.
  rpc Read(CassyReadRequest) returns (stream CassyReadResponse);

  // Stores a blob in Cassy.
  rpc Store(stream CassyStoreRequest) returns (CassyStoreResponse);
}

message CassyDeedRequest {
  // The path to a local file.
  string local_path = 1;
}

message CassyDeedResponse {
  // The digest of the inserted blob.
  Digest digest = 1;
}

message CassyPinRequest {
  // An identifier for the pin. For executors, this should be their PID (written
  // to the string as an ASCII base-10 integer, e.g. "3742").
  string id = 1;
  Digest digest = 2;
}

message CassyPinResponse {
  // The name of a local file from which the blob can be read. If missing, the
  // blob was not pinned.
  File local_path = 1;
}

message CassyUnpinRequest {
  // Who the pin was on behalf of. Must match the value used in the
  // "id" field of CassyPinRequest.
  string id = 1;
}

message CassyUnpinResponse {
}

message CassyReadRequest {
  // The digest of the blob that should be read from.
  Digest digest = 1;

  // Start offset in bytes.
  int64 offset = 2;

  // The maximum number of bytes to return.
  int64 max_length = 3;

  // Setting this to true will prevent the destination Cassy server from
  // forwarding the request to other Cassy server. Typically set to true for
  // requests from one Cassy server to another.
  bool do_not_proxy = 4;
}

message CassyReadResponse {
  // The digest of the blob that this read refers to.
  Digest digest = 1;

  // Some range of bytes starting at the specified offset.
  // Note that a partial read does not indicate EOF.
  bytes data = 2;

  // Start offset in bytes.
  int64 offset = 3;

  // True when size(blob) == offset + length(this.data).
  bool eof = 4;
}

message CassyStoreRequest {
  // The digest computed by the client.
  Digest digest = 1;

  int64 write_offset = 2;

  bool finish_write = 3;

  bytes data = 4;
}

message CassyStoreResponse {
  int64 written_bytes = 1;
}
